"""
Additional database schema for complete functionality
"""

ADDITIONAL_TABLES = """
-- Threat alerts table
CREATE TABLE threat_alerts (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    file_path VARCHAR2(4000) NOT NULL,
    event_type VARCHAR2(50),
    classification VARCHAR2(50) NOT NULL,
    threat_score NUMBER(3,2),
    alert_data CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    acknowledged CHAR(1) DEFAULT 'N',
    acknowledged_by VARCHAR2(255),
    acknowledged_at TIMESTAMP
) TABLESPACE USERS;

-- System events table
CREATE TABLE system_events (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type VARCHAR2(100) NOT NULL,
    event_category VARCHAR2(50),
    severity VARCHAR2(20),
    source_component VARCHAR2(100),
    event_message CLOB,
    event_data CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) TABLESPACE USERS;

-- Configuration history table
CREATE TABLE config_history (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_key VARCHAR2(255) NOT NULL,
    old_value CLOB,
    new_value CLOB,
    changed_by VARCHAR2(255),
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    change_reason VARCHAR2(500)
) TABLESPACE USERS;

-- Performance metrics table
CREATE TABLE performance_metrics (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    metric_name VARCHAR2(100) NOT NULL,
    metric_value NUMBER,
    metric_unit VARCHAR2(20),
    component VARCHAR2(100),
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) TABLESPACE USERS;

-- User sessions table
CREATE TABLE user_sessions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id VARCHAR2(255) UNIQUE NOT NULL,
    username VARCHAR2(255) NOT NULL,
    ip_address VARCHAR2(45),
    user_agent VARCHAR2(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'ACTIVE'
) TABLESPACE USERS;

-- API access logs table
CREATE TABLE api_access_logs (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    endpoint VARCHAR2(255) NOT NULL,
    method VARCHAR2(10) NOT NULL,
    ip_address VARCHAR2(45),
    user_agent VARCHAR2(500),
    request_data CLOB,
    response_status NUMBER,
    response_time NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) TABLESPACE USERS;

-- Create indexes for performance
CREATE INDEX idx_threat_alerts_created ON threat_alerts(created_at);
CREATE INDEX idx_threat_alerts_classification ON threat_alerts(classification);
CREATE INDEX idx_system_events_type ON system_events(event_type);
CREATE INDEX idx_system_events_created ON system_events(created_at);
CREATE INDEX idx_config_history_key ON config_history(config_key);
CREATE INDEX idx_performance_metrics_name ON performance_metrics(metric_name);
CREATE INDEX idx_performance_metrics_recorded ON performance_metrics(recorded_at);
CREATE INDEX idx_user_sessions_username ON user_sessions(username);
CREATE INDEX idx_user_sessions_status ON user_sessions(status);
CREATE INDEX idx_api_logs_endpoint ON api_access_logs(endpoint);
CREATE INDEX idx_api_logs_created ON api_access_logs(created_at);
"""

import sqlite3
import logging
from typing import Dict, List, Optional, Any
import json
import time
from contextlib import contextmanager

class AdvancedAntivirusDatabase:
    """Advanced database schema and operations for the antivirus system"""
    
    def __init__(self, db_path: str = "antivirus.db"):
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)
        self._initialize_database()
    
    def _initialize_database(self):
        """Initialize database with all required tables"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Create tables
                self._create_scan_results_table(cursor)
                self._create_threats_table(cursor)
                self._create_quarantine_table(cursor)
                self._create_behavioral_events_table(cursor)
                self._create_network_threats_table(cursor)
                self._create_threat_intelligence_table(cursor)
                self._create_signatures_table(cursor)
                self._create_scan_statistics_table(cursor)
                self._create_system_events_table(cursor)
                self._create_configuration_table(cursor)
                
                conn.commit()
                self.logger.info("Database initialized successfully")
                
        except Exception as e:
            self.logger.error(f"Error initializing database: {e}")
            raise
    
    @contextmanager
    def get_connection(self):
        """Get database connection with proper error handling"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_path, timeout=30.0)
            conn.row_factory = sqlite3.Row  # Enable column access by name
            yield conn
        except Exception as e:
            if conn:
                conn.rollback()
            raise e
        finally:
            if conn:
                conn.close()
    
    def _create_scan_results_table(self, cursor):
        """Create scan results table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scan_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_path TEXT NOT NULL,
                file_hash TEXT,
                scan_timestamp REAL NOT NULL,
                threat_level INTEGER NOT NULL,
                confidence REAL NOT NULL,
                detection_method TEXT,
                threat_name TEXT,
                static_score REAL DEFAULT 0.0,
                behavioral_score REAL DEFAULT 0.0,
                ml_score REAL DEFAULT 0.0,
                metadata TEXT,
                scan_duration REAL,
                file_size INTEGER,
                created_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        # Create indexes
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_scan_file_path ON scan_results(file_path)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_scan_timestamp ON scan_results(scan_timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_scan_threat_level ON scan_results(threat_level)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_scan_file_hash ON scan_results(file_hash)')
    
    def _create_threats_table(self, cursor):
        """Create threats table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS threats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                threat_id TEXT UNIQUE NOT NULL,
                file_path TEXT NOT NULL,
                threat_type TEXT NOT NULL,
                threat_name TEXT,
                severity INTEGER NOT NULL,
                confidence REAL NOT NULL,
                detection_timestamp REAL NOT NULL,
                status TEXT DEFAULT 'active',
                action_taken TEXT,
                quarantined BOOLEAN DEFAULT FALSE,
                false_positive BOOLEAN DEFAULT FALSE,
                metadata TEXT,
                created_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_threats_timestamp ON threats(detection_timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_threats_status ON threats(status)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_threats_type ON threats(threat_type)')
    
    def _create_quarantine_table(self, cursor):
        """Create quarantine table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quarantine (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                original_path TEXT NOT NULL,
                quarantine_path TEXT NOT NULL,
                file_hash TEXT,
                threat_name TEXT,
                quarantine_timestamp REAL NOT NULL,
                file_size INTEGER,
                encryption_key TEXT,
                metadata TEXT,
                restored BOOLEAN DEFAULT FALSE,
                deleted BOOLEAN DEFAULT FALSE,
                created_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_quarantine_timestamp ON quarantine(quarantine_timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_quarantine_hash ON quarantine(file_hash)')
    
    def _create_behavioral_events_table(self, cursor):
        """Create behavioral events table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS behavioral_events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_timestamp REAL NOT NULL,
                process_id INTEGER NOT NULL,
                process_name TEXT,
                behavior_type TEXT NOT NULL,
                risk_score REAL NOT NULL,
                details TEXT,
                threat_detected BOOLEAN DEFAULT FALSE,
                created_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_behavioral_timestamp ON behavioral_events(event_timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_behavioral_process ON behavioral_events(process_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_behavioral_type ON behavioral_events(behavior_type)')
    
    def _create_network_threats_table(self, cursor):
        """Create network threats table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS network_threats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                threat_type TEXT NOT NULL,
                source_ip TEXT NOT NULL,
                destination_ip TEXT NOT NULL,
                source_port INTEGER,
                destination_port INTEGER,
                protocol TEXT,
                threat_description TEXT,
                confidence REAL NOT NULL,
                evidence TEXT,
                detection_timestamp REAL NOT NULL,
                blocked BOOLEAN DEFAULT FALSE,
                created_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_network_timestamp ON network_threats(detection_timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_network_source_ip ON network_threats(source_ip)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_network_dest_ip ON network_threats(destination_ip)')
    
    def _create_threat_intelligence_table(self, cursor):
        """Create threat intelligence table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS threat_intelligence (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                indicator_type TEXT NOT NULL,
                indicator_value TEXT NOT NULL,
                threat_type TEXT,
                confidence REAL,
                source TEXT,
                first_seen REAL NOT NULL,
                last_seen REAL NOT NULL,
                metadata TEXT,
                active BOOLEAN DEFAULT TRUE,
                created_at REAL DEFAULT (julianday('now')),
                UNIQUE(indicator_type, indicator_value)
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_threat_intel_type ON threat_intelligence(indicator_type)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_threat_intel_value ON threat_intelligence(indicator_value)')
    
    def _create_signatures_table(self, cursor):
        """Create signatures table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS signatures (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                signature_type TEXT NOT NULL,
                signature_name TEXT NOT NULL,
                signature_data TEXT NOT NULL,
                threat_family TEXT,
                severity INTEGER,
                version INTEGER DEFAULT 1,
                active BOOLEAN DEFAULT TRUE,
                created_at REAL DEFAULT (julianday('now')),
                updated_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_signatures_type ON signatures(signature_type)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_signatures_name ON signatures(signature_name)')
    
    def _create_scan_statistics_table(self, cursor):
        """Create scan statistics table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scan_statistics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                files_scanned INTEGER DEFAULT 0,
                threats_detected INTEGER DEFAULT 0,
                false_positives INTEGER DEFAULT 0,
                scan_time_total REAL DEFAULT 0.0,
                avg_scan_time REAL DEFAULT 0.0,
                detection_rate REAL DEFAULT 0.0,
                metadata TEXT,
                created_at REAL DEFAULT (julianday('now')),
                UNIQUE(date)
            )
        ''')
    
    def _create_system_events_table(self, cursor):
        """Create system events table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS system_events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_type TEXT NOT NULL,
                event_level TEXT NOT NULL,
                message TEXT NOT NULL,
                component TEXT,
                details TEXT,
                event_timestamp REAL NOT NULL,
                created_at REAL DEFAULT (julianday('now'))
            )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_events_timestamp ON system_events(event_timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_events_type ON system_events(event_type)')
    
    def _create_configuration_table(self, cursor):
        """Create configuration table"""
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS configuration (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                config_key TEXT UNIQUE NOT NULL,
                config_value TEXT,
                config_type TEXT DEFAULT 'string',
                description TEXT,
                updated_at REAL DEFAULT (julianday('now'))
            )
        ''')
    
    # Scan Results Operations
    def insert_scan_result(self, scan_result: Dict) -> int:
        """Insert scan result into database"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO scan_results (
                        file_path, file_hash, scan_timestamp, threat_level, confidence,
                        detection_method, threat_name, static_score, behavioral_score,
                        ml_score, metadata, scan_duration, file_size
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    scan_result['file_path'],
                    scan_result.get('file_hash'),
                    scan_result['scan_timestamp'],
                    scan_result['threat_level'],
                    scan_result['confidence'],
                    scan_result.get('detection_method'),
                    scan_result.get('threat_name'),
                    scan_result.get('static_score', 0.0),
                    scan_result.get('behavioral_score', 0.0),
                    scan_result.get('ml_score', 0.0),
                    json.dumps(scan_result.get('metadata', {})),
                    scan_result.get('scan_duration'),
                    scan_result.get('file_size')
                ))
                
                conn.commit()
                return cursor.lastrowid
                
        except Exception as e:
            self.logger.error(f"Error inserting scan result: {e}")
            raise
    
    def get_scan_results(self, limit: int = 100, offset: int = 0) -> List[Dict]:
        """Get scan results from database"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT * FROM scan_results 
                    ORDER BY scan_timestamp DESC 
                    LIMIT ? OFFSET ?
                ''', (limit, offset))
                
                results = []
                for row in cursor.fetchall():
                    result = dict(row)
                    if result['metadata']:
                        result['metadata'] = json.loads(result['metadata'])
                    results.append(result)
                
                return results
                
        except Exception as e:
            self.logger.error(f"Error getting scan results: {e}")
            return []
    
    # Threat Operations
    def insert_threat(self, threat: Dict) -> int:
        """Insert threat into database"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO threats (
                        threat_id, file_path, threat_type, threat_name, severity,
                        confidence, detection_timestamp, status, action_taken,
                        quarantined, metadata
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    threat['threat_id'],
                    threat['file_path'],
                    threat['threat_type'],
                    threat.get('threat_name'),
                    threat['severity'],
                    threat['confidence'],
                    threat['detection_timestamp'],
                    threat.get('status', 'active'),
                    threat.get('action_taken'),
                    threat.get('quarantined', False),
                    json.dumps(threat.get('metadata', {}))
                ))
                
                conn.commit()
                return cursor.lastrowid
                
        except Exception as e:
            self.logger.error(f"Error inserting threat: {e}")
            raise
    
    # Behavioral Events Operations
    def insert_behavioral_event(self, event: Dict) -> int:
        """Insert behavioral event into database"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO behavioral_events (
                        event_timestamp, process_id, process_name, behavior_type,
                        risk_score, details, threat_detected
                    ) VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    event['timestamp'],
                    event['process_id'],
                    event['process_name'],
                    event['behavior_type'],
                    event['risk_score'],
                    json.dumps(event.get('details', {})),
                    event.get('threat_detected', False)
                ))
                
                conn.commit()
                return cursor.lastrowid
                
        except Exception as e:
            self.logger.error(f"Error inserting behavioral event: {e}")
            raise
    
    # Network Threats Operations
    def insert_network_threat(self, threat: Dict) -> int:
        """Insert network threat into database"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO network_threats (
                        threat_type, source_ip, destination_ip, source_port,
                        destination_port, protocol, threat_description, confidence,
                        evidence, detection_timestamp, blocked
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    threat['threat_type'],
                    threat['source_ip'],
                    threat['destination_ip'],
                    threat['source_port'],
                    threat['destination_port'],
                    threat['protocol'],
                    threat['threat_description'],
                    threat['confidence'],
                    json.dumps(threat.get('evidence', {})),
                    threat['timestamp'],
                    threat.get('blocked', False)
                ))
                
                conn.commit()
                return cursor.lastrowid
                
        except Exception as e:
            self.logger.error(f"Error inserting network threat: {e}")
            raise
    
    # Statistics Operations
    def update_daily_statistics(self, date: str, stats: Dict):
        """Update daily scan statistics"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT OR REPLACE INTO scan_statistics (
                        date, files_scanned, threats_detected, false_positives,
                        scan_time_total, avg_scan_time, detection_rate, metadata
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    date,
                    stats.get('files_scanned', 0),
                    stats.get('threats_detected', 0),
                    stats.get('false_positives', 0),
                    stats.get('scan_time_total', 0.0),
                    stats.get('avg_scan_time', 0.0),
                    stats.get('detection_rate', 0.0),
                    json.dumps(stats.get('metadata', {}))
                ))
                
                conn.commit()
                
        except Exception as e:
            self.logger.error(f"Error updating daily statistics: {e}")
    
    def get_statistics_summary(self, days: int = 30) -> Dict:
        """Get statistics summary for the last N days"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Get daily statistics
                cursor.execute('''
                    SELECT * FROM scan_statistics 
                    WHERE date >= date('now', '-{} days')
                    ORDER BY date DESC
                '''.format(days))
                
                daily_stats = [dict(row) for row in cursor.fetchall()]
                
                # Get total counts
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total_scans,
                        SUM(CASE WHEN threat_level > 0 THEN 1 ELSE 0 END) as total_threats
                    FROM scan_results 
                    WHERE scan_timestamp >= julianday('now', '-{} days')
                '''.format(days))
                
                totals = dict(cursor.fetchone())
                
                return {
                    'daily_statistics': daily_stats,
                    'summary': totals,
                    'period_days': days
                }
                
        except Exception as e:
            self.logger.error(f"Error getting statistics summary: {e}")
            return {}
    
    # Configuration Operations
    def set_config(self, key: str, value: Any, config_type: str = 'string', description: str = None):
        """Set configuration value"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # Convert value to string based on type
                if config_type == 'json':
                    value_str = json.dumps(value)
                else:
                    value_str = str(value)
                
                cursor.execute('''
                    INSERT OR REPLACE INTO configuration (
                        config_key, config_value, config_type, description, updated_at
                    ) VALUES (?, ?, ?, ?, julianday('now'))
                ''', (key, value_str, config_type, description))
                
                conn.commit()
                
        except Exception as e:
            self.logger.error(f"Error setting configuration: {e}")
    
    def get_config(self, key: str, default=None):
        """Get configuration value"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT config_value, config_type FROM configuration 
                    WHERE config_key = ?
                ''', (key,))
                
                result = cursor.fetchone()
                if result:
                    value, config_type = result
                    
                    # Convert value based on type
                    if config_type == 'json':
                        return json.loads(value)
                    elif config_type == 'int':
                        return int(value)
                    elif config_type == 'float':
                        return float(value)
                    elif config_type == 'bool':
                        return value.lower() in ('true', '1', 'yes')
                    else:
                        return value
                
                return default
                
        except Exception as e:
            self.logger.error(f"Error getting configuration: {e}")
            return default
    
    # Cleanup Operations
    def cleanup_old_data(self, days: int = 90):
        """Clean up old data from database"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cutoff_date = time.time() - (days * 24 * 3600)
                
                # Clean up old scan results
                cursor.execute('''
                    DELETE FROM scan_results 
                    WHERE scan_timestamp < ?
                ''', (cutoff_date,))
                
                # Clean up old behavioral events
                cursor.execute('''
                    DELETE FROM behavioral_events 
                    WHERE event_timestamp < ?
                ''', (cutoff_date,))
                
                # Clean up old network threats
                cursor.execute('''
                    DELETE FROM network_threats 
                    WHERE detection_timestamp < ?
                ''', (cutoff_date,))
                
                # Clean up old system events
                cursor.execute('''
                    DELETE FROM system_events 
                    WHERE event_timestamp < ?
                ''', (cutoff_date,))
                
                conn.commit()
                
                # Vacuum database to reclaim space
                cursor.execute('VACUUM')
                
                self.logger.info(f"Cleaned up data older than {days} days")
                
        except Exception as e:
            self.logger.error(f"Error cleaning up old data: {e}")